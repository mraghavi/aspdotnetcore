import { Component ,  NgModule,  OnInit} from '@angular/core';
import { StudentService } from '../../services/student.service';
import { HttpClient } from '@angular/common/http';

import { CommonModule } from '@angular/common';
import { ReactiveFormsModule,FormGroup,FormBuilder,Validators, NgModel, FormsModule} from '@angular/forms';

interface Student {
  id: number;
  name: string;
  age: number;
  course: string;
}



@Component({
  selector: 'app-student',
  imports: [CommonModule,ReactiveFormsModule,FormsModule],
  templateUrl: './student.component.html',
  styleUrl: './student.component.css'
})
export class StudentComponent implements OnInit {
  students: Student[] = [];
  newStudent: Student = { id: 0, name: '', age: 0, course: '' };
  selectedStudent: Student | null = null;
  isEditing = false;

  // Temporary properties for binding
  tempName: string = '';
  tempAge: number = 0;
  tempCourse: string = '';

  constructor(private studentService: StudentService) {}

  ngOnInit(): void {
    this.loadStudents();
  }

  loadStudents(): void {
    console.log('Fetching all students...');
    this.studentService.getAllStudents().subscribe({
      next: (students) => {
        console.log('Fetched students:', students);
        this.students = students;  // Update the local students list
      },
      error: (error) => {
        console.error('Error loading students:', error);
      }
    });
  }

  saveStudent(): void {
    if (this.isEditing && this.selectedStudent) {
      // Update existing student
      this.selectedStudent.name = this.tempName;
      this.selectedStudent.age = this.tempAge;
      this.selectedStudent.course = this.tempCourse;

      console.log('Updating student with id', this.selectedStudent.id, this.selectedStudent);
      this.studentService.updateStudent(this.selectedStudent.id, this.selectedStudent).subscribe({
        next: () => {
          console.log('Student updated');
          this.loadStudents(); // Refresh the list after update
          this.resetForm();
        },
        error: (error) => {
          console.error('Error updating student:', error);
        }
      });
    } else {
      // Add new student
      const studentToAdd: Student = {
        id: 0,  // id will be generated by the backend
        name: this.tempName,
        age: this.tempAge,
        course: this.tempCourse
      };

      console.log('Adding new student:', studentToAdd);
      this.studentService.addStudent(studentToAdd).subscribe({
        next: (newStudent) => {
          console.log('Student added:', newStudent);
          this.students.push(newStudent);  // Update the local students array with the new student
          this.resetForm();
        },
        error: (error) => {
          console.error('Error adding student:', error);
        }
      });
    }
  }

  deleteStudent(id: number): void {
    this.studentService.deleteStudent(id).subscribe({
      next: () => {
        console.log('Student deleted');
        // Remove student from the list without needing to reload from the server
        this.students = this.students.filter(student => student.id !== id);
      },
      error: (error) => {
        console.error('Error deleting student:', error);
      }
    });
  }

  resetForm(): void {
    this.selectedStudent = null;
    this.isEditing = false;
    this.tempName = '';
    this.tempAge = 0;
    this.tempCourse = '';
  }

  editStudent(student: Student): void {
    this.selectedStudent = { ...student };
    this.isEditing = true;
    this.tempName = student.name;
    this.tempAge = student.age;
    this.tempCourse = student.course;
  }
}